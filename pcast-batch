#!/usr/bin/perl
#
# (c) 2019-2020 Vitaly Parnas <vp330@parnas.me>
# See LICENSE for licensing information.

use strict;
use warnings;
use 5.010;
use File::Basename;
use File::Copy;

my $DELIM = ';';
my $QUIET = 0;
my $DELETE_TEMP = 0;
my $INPUTDIR = "";
my $OUTDIR = "";
my $FILTER_CMD = "";
my $OUTPUT_TEMPLATE = "";
my $OUTPUT_APPEND_FILE = "";
my $CONF_FILE = basename($0) . '.cfg';

( $ARGV[0] ) or die "Must specify audio list\n";

foreach ("./.$CONF_FILE", "$ENV{HOME}/.$CONF_FILE", 
    "$ENV{HOME}/.config/$CONF_FILE") {
    if (-e) {
        say "Reading configuration $_";
        eval `cat $_`;
        last;
    }
}
(-d $OUTDIR) or die "Directory $OUTDIR nonexistent\n";
(-d $INPUTDIR) or die "Directory $INPUTDIR nonexistent\n";
say "inputdir: $INPUTDIR" unless $QUIET;
open (IN_FILE, "< $ARGV[0]") or die "Couldn't open input file: $!\n";
chdir $OUTDIR; 
$OUTDIR="";

while (<IN_FILE>) {
    chomp;
    next if /^(#|\s*$|date)/i; # comments, blanks, or header
    my ($date, $input, $output, $title, $cut, $desc) = split /$DELIM/;
    say "date=$date, i=$input, o=$output, t=$title, c=$cut, desc=$desc" 
    unless $QUIET;
    $input = $INPUTDIR . $input;
    $output = $OUTDIR . $output;
    my $pre_output = $output . "_tmp.mp3";

    say "\nProcessing " . basename($input);
    (! -f $input) and say "$input not found, skip." and next;
    (-f $output) and say "Output $output exists, skip." and next;
    if ($cut) {
        my @temp_files = ();
        my @time_segments = ();
        # Convert the 'exclude' string of timestamps to an 'include' string
        my @times = split /[,;-]/, "0,$cut,0";
        my $concat_temp='input_files.txt';

        while(my ($start,$end) = splice(@times,0,2)) {
            #say "s: $start, e: $end";
            my $from = $start eq '0' ? "" : "-ss $start";
            my $to = ($end eq '0') ? "" : "-to $end";
            push (@time_segments, "$from $to") if ($from || $to);
        }
        say "Time segments: @time_segments" unless $QUIET;
        my $cut_idx = 0;
        foreach (@time_segments) {
            my $tmp_file = "$output.$cut_idx.mp3";
            push (@temp_files, $tmp_file);
            $cut_idx++;
            if ( -f "$tmp_file" ) {
                say "$tmp_file exists, skip.";
            } else {
                say "Writing segment $_ to $tmp_file...";
                system "ffmpeg -v error -n -i $input $_ $tmp_file";
            }
        }
        say "Combining time segments into $pre_output...";
        open(my $fh, '>', $concat_temp) or die "Could not open file $concat_temp\n";
        foreach (@temp_files) {
            say $fh "file '$_'";
        }
        close $fh;
        system "ffmpeg -v warning -n -f concat -safe 0 -i $concat_temp -c copy $pre_output";
        if ($DELETE_TEMP) {
            say "Deleting temp files @temp_files." unless $QUIET;
            unlink @temp_files;
            unlink $concat_temp;
        }
    } else {
        copy $input, $pre_output;
    }
    if ($FILTER_CMD) {
        say "Executing filter command...";
        my $input = $pre_output;
        my $cmd = eval "$FILTER_CMD";
        #say "cmd: $cmd";
        system $cmd;
        if ($DELETE_TEMP) {
            say "Deleting $pre_output." unless $QUIET;
            unlink $pre_output;
        }
    } else {
        move $pre_output, $output;
    }
    say "Generated $output";
    if ($OUTPUT_TEMPLATE and $OUTPUT_APPEND_FILE) {
        my $out_row = eval "$OUTPUT_TEMPLATE";
        say "$out_row >> $OUTPUT_APPEND_FILE" unless $QUIET;
        open(my $fh, '>>', $OUTPUT_APPEND_FILE) or die "Could not open file '$OUTPUT_APPEND_FILE' $!";
        if ((system "grep -qF \"$out_row\" $OUTPUT_APPEND_FILE") == 0) {
            say "$OUTPUT_APPEND_FILE already contains template entry.";
        } else {
            say $fh $out_row;
        }
        close $fh;
    }
}

close IN_FILE;
